<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'intField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'optionalIntField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'setField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'optionalSetField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'mapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    6 => shape(
      'var' => 'optionalMapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'intField' => 1,
    'optionalIntField' => 2,
    'setField' => 3,
    'optionalSetField' => 4,
    'mapField' => 5,
    'optionalMapField' => 6,
  ];

  const type TConstructorShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'optionalIntField' => ?\Adapter1::THackType,
    ?'setField' => ?\Adapter2::THackType,
    ?'optionalSetField' => ?\Adapter2::THackType,
    ?'mapField' => ?\Adapter3::THackType,
    ?'optionalMapField' => ?\Adapter3::THackType,
  );

  const int STRUCTURAL_ID = 5916824478803967953;
  /**
   * Original thrift field:-
   * 1: i32 intField
   */
  public \Adapter1::THackType $intField;
  /**
   * Original thrift field:-
   * 2: i32 optionalIntField
   */
  public ?\Adapter1::THackType $optionalIntField;
  /**
   * Original thrift field:-
   * 3: set<string> setField
   */
  public \Adapter2::THackType $setField;
  /**
   * Original thrift field:-
   * 4: set<string> optionalSetField
   */
  public ?\Adapter2::THackType $optionalSetField;
  /**
   * Original thrift field:-
   * 5: map<string, list<string>> mapField
   */
  public \Adapter3::THackType $mapField;
  /**
   * Original thrift field:-
   * 6: map<string, list<string>> optionalMapField
   */
  public ?\Adapter3::THackType $optionalMapField;

  public function __construct(?\Adapter1::THackType $intField = null, ?\Adapter1::THackType $optionalIntField = null, ?\Adapter2::THackType $setField = null, ?\Adapter2::THackType $optionalSetField = null, ?\Adapter3::THackType $mapField = null, ?\Adapter3::THackType $optionalMapField = null  )[] {
    $this->intField = $intField ?? \Adapter1::fromThrift(0);
    $this->optionalIntField = $optionalIntField;
    $this->setField = $setField ?? \Adapter2::fromThrift(Set {});
    $this->optionalSetField = $optionalSetField;
    $this->mapField = $mapField ?? \Adapter3::fromThrift(Map {});
    $this->optionalMapField = $optionalMapField;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'optionalIntField'),
      Shapes::idx($shape, 'setField'),
      Shapes::idx($shape, 'optionalSetField'),
      Shapes::idx($shape, 'mapField'),
      Shapes::idx($shape, 'optionalMapField'),
    );
  }

  public function getName(): string {
    return 'Foo';
  }

  public static function getAllStructuredAnnotations(): \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  private static function __hackAdapterTypeChecks(): void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, int>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, string>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Set<string>>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Vector<\Adapter1::THackType>>();
    \ThriftUtil::requireSameType<\Adapter3::TThriftType, Map<string, \Adapter2::THackType>>();
  }

}

/**
 * Original thrift struct:-
 * Bar
 */
class Bar implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'structField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Foo::class,
    ),
    2 => shape(
      'var' => 'optionalStructField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Foo::class,
    ),
    3 => shape(
      'var' => 'structListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => Foo::class,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'optionalStructListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => Foo::class,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'structField' => 1,
    'optionalStructField' => 2,
    'structListField' => 3,
    'optionalStructListField' => 4,
  ];

  const type TConstructorShape = shape(
    ?'structField' => ?\Adapter1::THackType,
    ?'optionalStructField' => ?\Adapter1::THackType,
    ?'structListField' => ?Vector<\Adapter1::THackType>,
    ?'optionalStructListField' => ?Vector<\Adapter1::THackType>,
  );

  const int STRUCTURAL_ID = 71551725779511518;
  /**
   * Original thrift field:-
   * 1: struct module.Foo structField
   */
  public ?\Adapter1::THackType $structField;
  /**
   * Original thrift field:-
   * 2: struct module.Foo optionalStructField
   */
  public ?\Adapter1::THackType $optionalStructField;
  /**
   * Original thrift field:-
   * 3: list<struct module.Foo> structListField
   */
  public Vector<\Adapter1::THackType> $structListField;
  /**
   * Original thrift field:-
   * 4: list<struct module.Foo> optionalStructListField
   */
  public ?Vector<\Adapter1::THackType> $optionalStructListField;

  public function __construct(?\Adapter1::THackType $structField = null, ?\Adapter1::THackType $optionalStructField = null, ?Vector<\Adapter1::THackType> $structListField = null, ?Vector<\Adapter1::THackType> $optionalStructListField = null  )[] {
    $this->structField = $structField;
    $this->optionalStructField = $optionalStructField;
    $this->structListField = $structListField ?? Vector {};
    $this->optionalStructListField = $optionalStructListField;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'structField'),
      Shapes::idx($shape, 'optionalStructField'),
      Shapes::idx($shape, 'structListField'),
      Shapes::idx($shape, 'optionalStructListField'),
    );
  }

  public function getName(): string {
    return 'Bar';
  }

  public static function getAllStructuredAnnotations(): \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  private static function __hackAdapterTypeChecks(): void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, Foo>();
  }

}

