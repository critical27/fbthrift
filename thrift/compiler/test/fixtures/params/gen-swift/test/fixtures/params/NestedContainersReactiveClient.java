/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.params;

import java.util.*;
import org.apache.thrift.protocol.*;

public class NestedContainersReactiveClient 
  implements NestedContainers.Reactive {
  private final org.apache.thrift.ProtocolId _protocolId;
  private final reactor.core.publisher.Mono<? extends com.facebook.swift.transport.client.RpcClient> _rpcClient;

  private static final TField _mapList_FOO_FIELD_DESC = new TField("foo", TType.MAP, (short)(0 + 1));
  private static final java.util.Map<Short, com.facebook.swift.transport.payload.Reader> _mapList_EXCEPTION_READERS;
  private static final TField _mapSet_FOO_FIELD_DESC = new TField("foo", TType.MAP, (short)(0 + 1));
  private static final java.util.Map<Short, com.facebook.swift.transport.payload.Reader> _mapSet_EXCEPTION_READERS;
  private static final TField _listMap_FOO_FIELD_DESC = new TField("foo", TType.LIST, (short)(0 + 1));
  private static final java.util.Map<Short, com.facebook.swift.transport.payload.Reader> _listMap_EXCEPTION_READERS;
  private static final TField _listSet_FOO_FIELD_DESC = new TField("foo", TType.LIST, (short)(0 + 1));
  private static final java.util.Map<Short, com.facebook.swift.transport.payload.Reader> _listSet_EXCEPTION_READERS;
  private static final TField _turtles_FOO_FIELD_DESC = new TField("foo", TType.LIST, (short)(0 + 1));
  private static final java.util.Map<Short, com.facebook.swift.transport.payload.Reader> _turtles_EXCEPTION_READERS;

  static {
    _mapList_EXCEPTION_READERS = java.util.Collections.emptyMap();
    _mapSet_EXCEPTION_READERS = java.util.Collections.emptyMap();
    _listMap_EXCEPTION_READERS = java.util.Collections.emptyMap();
    _listSet_EXCEPTION_READERS = java.util.Collections.emptyMap();
    _turtles_EXCEPTION_READERS = java.util.Collections.emptyMap();
  }

  public NestedContainersReactiveClient(org.apache.thrift.ProtocolId _protocolId, reactor.core.publisher.Mono<? extends com.facebook.swift.transport.client.RpcClient> _rpcClient) {
    
    this._protocolId = _protocolId;
    this._rpcClient = _rpcClient;
  }

  @java.lang.Override
  public void close() {}

  private com.facebook.swift.transport.payload.Writer _createmapListWriter(final Map<Integer, List<Integer>> foo) {
    return oprot -> {
      try {
        {
          oprot.writeFieldBegin(_mapList_FOO_FIELD_DESC);

          Map<Integer, List<Integer>> _iter0 = foo;

          oprot.writeMapBegin(new TMap(TType.I32, TType.LIST, _iter0.size()));
        for (Map.Entry<Integer, List<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          
          oprot.writeListBegin(new TList(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeListEnd();
        }
        oprot.writeMapEnd();
          oprot.writeFieldEnd();
        }


      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static final com.facebook.swift.transport.payload.Reader _mapList_READER =
    oprot -> {
              try {

                return null;

              } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
              }
            };


  @java.lang.Override
  public reactor.core.publisher.Mono<Void> mapList(final Map<Integer, List<Integer>> foo) {
    return _rpcClient
      .flatMap(_rpc -> {
        org.apache.thrift.RequestRpcMetadata _metadata = new org.apache.thrift.RequestRpcMetadata.Builder()
                .setName("mapList")
                .setKind(org.apache.thrift.RpcKind.SINGLE_REQUEST_SINGLE_RESPONSE)
                .setOtherMetadata(Collections.emptyMap())
                .setProtocol(_protocolId)
                .build();

            com.facebook.swift.transport.payload.ClientRequestPayload<Void> _crp =
                com.facebook.swift.transport.payload.ClientRequestPayload.create(
                    _createmapListWriter(foo),
                    _mapList_READER,
                    _mapList_EXCEPTION_READERS,
                    _metadata,
                    java.util.Collections.emptyMap());

            return _rpc
                .singleRequestSingleResponse(_crp, com.facebook.swift.transport.client.RpcOptions.EMPTY)
                .map(_p -> _p.getData());
      });
  }

  private com.facebook.swift.transport.payload.Writer _createmapSetWriter(final Map<Integer, Set<Integer>> foo) {
    return oprot -> {
      try {
        {
          oprot.writeFieldBegin(_mapSet_FOO_FIELD_DESC);

          Map<Integer, Set<Integer>> _iter0 = foo;

          oprot.writeMapBegin(new TMap(TType.I32, TType.SET, _iter0.size()));
        for (Map.Entry<Integer, Set<Integer>> _iter1 : _iter0.entrySet()) {
          oprot.writeI32(_iter1.getKey());
          
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.getValue().size()));
        for (int _iter2 : _iter1.getValue()) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeMapEnd();
          oprot.writeFieldEnd();
        }


      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static final com.facebook.swift.transport.payload.Reader _mapSet_READER =
    oprot -> {
              try {

                return null;

              } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
              }
            };


  @java.lang.Override
  public reactor.core.publisher.Mono<Void> mapSet(final Map<Integer, Set<Integer>> foo) {
    return _rpcClient
      .flatMap(_rpc -> {
        org.apache.thrift.RequestRpcMetadata _metadata = new org.apache.thrift.RequestRpcMetadata.Builder()
                .setName("mapSet")
                .setKind(org.apache.thrift.RpcKind.SINGLE_REQUEST_SINGLE_RESPONSE)
                .setOtherMetadata(Collections.emptyMap())
                .setProtocol(_protocolId)
                .build();

            com.facebook.swift.transport.payload.ClientRequestPayload<Void> _crp =
                com.facebook.swift.transport.payload.ClientRequestPayload.create(
                    _createmapSetWriter(foo),
                    _mapSet_READER,
                    _mapSet_EXCEPTION_READERS,
                    _metadata,
                    java.util.Collections.emptyMap());

            return _rpc
                .singleRequestSingleResponse(_crp, com.facebook.swift.transport.client.RpcOptions.EMPTY)
                .map(_p -> _p.getData());
      });
  }

  private com.facebook.swift.transport.payload.Writer _createlistMapWriter(final List<Map<Integer, Integer>> foo) {
    return oprot -> {
      try {
        {
          oprot.writeFieldBegin(_listMap_FOO_FIELD_DESC);

          List<Map<Integer, Integer>> _iter0 = foo;

          oprot.writeListBegin(new TList(TType.MAP, _iter0.size()));
        for (Map<Integer, Integer> _iter1 : _iter0) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _iter1.size()));
        for (Map.Entry<Integer, Integer> _iter2 : _iter1.entrySet()) {
          oprot.writeI32(_iter2.getKey());
          oprot.writeI32(_iter2.getValue());
        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
          oprot.writeFieldEnd();
        }


      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static final com.facebook.swift.transport.payload.Reader _listMap_READER =
    oprot -> {
              try {

                return null;

              } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
              }
            };


  @java.lang.Override
  public reactor.core.publisher.Mono<Void> listMap(final List<Map<Integer, Integer>> foo) {
    return _rpcClient
      .flatMap(_rpc -> {
        org.apache.thrift.RequestRpcMetadata _metadata = new org.apache.thrift.RequestRpcMetadata.Builder()
                .setName("listMap")
                .setKind(org.apache.thrift.RpcKind.SINGLE_REQUEST_SINGLE_RESPONSE)
                .setOtherMetadata(Collections.emptyMap())
                .setProtocol(_protocolId)
                .build();

            com.facebook.swift.transport.payload.ClientRequestPayload<Void> _crp =
                com.facebook.swift.transport.payload.ClientRequestPayload.create(
                    _createlistMapWriter(foo),
                    _listMap_READER,
                    _listMap_EXCEPTION_READERS,
                    _metadata,
                    java.util.Collections.emptyMap());

            return _rpc
                .singleRequestSingleResponse(_crp, com.facebook.swift.transport.client.RpcOptions.EMPTY)
                .map(_p -> _p.getData());
      });
  }

  private com.facebook.swift.transport.payload.Writer _createlistSetWriter(final List<Set<Integer>> foo) {
    return oprot -> {
      try {
        {
          oprot.writeFieldBegin(_listSet_FOO_FIELD_DESC);

          List<Set<Integer>> _iter0 = foo;

          oprot.writeListBegin(new TList(TType.SET, _iter0.size()));
        for (Set<Integer> _iter1 : _iter0) {
          oprot.writeSetBegin(new TSet(TType.I32, _iter1.size()));
        for (int _iter2 : _iter1) {
          oprot.writeI32(_iter2);
        }
        oprot.writeSetEnd();
        }
        oprot.writeListEnd();
          oprot.writeFieldEnd();
        }


      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static final com.facebook.swift.transport.payload.Reader _listSet_READER =
    oprot -> {
              try {

                return null;

              } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
              }
            };


  @java.lang.Override
  public reactor.core.publisher.Mono<Void> listSet(final List<Set<Integer>> foo) {
    return _rpcClient
      .flatMap(_rpc -> {
        org.apache.thrift.RequestRpcMetadata _metadata = new org.apache.thrift.RequestRpcMetadata.Builder()
                .setName("listSet")
                .setKind(org.apache.thrift.RpcKind.SINGLE_REQUEST_SINGLE_RESPONSE)
                .setOtherMetadata(Collections.emptyMap())
                .setProtocol(_protocolId)
                .build();

            com.facebook.swift.transport.payload.ClientRequestPayload<Void> _crp =
                com.facebook.swift.transport.payload.ClientRequestPayload.create(
                    _createlistSetWriter(foo),
                    _listSet_READER,
                    _listSet_EXCEPTION_READERS,
                    _metadata,
                    java.util.Collections.emptyMap());

            return _rpc
                .singleRequestSingleResponse(_crp, com.facebook.swift.transport.client.RpcOptions.EMPTY)
                .map(_p -> _p.getData());
      });
  }

  private com.facebook.swift.transport.payload.Writer _createturtlesWriter(final List<List<Map<Integer, Map<Integer, Set<Integer>>>>> foo) {
    return oprot -> {
      try {
        {
          oprot.writeFieldBegin(_turtles_FOO_FIELD_DESC);

          List<List<Map<Integer, Map<Integer, Set<Integer>>>>> _iter0 = foo;

          oprot.writeListBegin(new TList(TType.LIST, _iter0.size()));
        for (List<Map<Integer, Map<Integer, Set<Integer>>>> _iter1 : _iter0) {
          oprot.writeListBegin(new TList(TType.MAP, _iter1.size()));
        for (Map<Integer, Map<Integer, Set<Integer>>> _iter2 : _iter1) {
          oprot.writeMapBegin(new TMap(TType.I32, TType.MAP, _iter2.size()));
        for (Map.Entry<Integer, Map<Integer, Set<Integer>>> _iter3 : _iter2.entrySet()) {
          oprot.writeI32(_iter3.getKey());
          
          oprot.writeMapBegin(new TMap(TType.I32, TType.SET, _iter3.getValue().size()));
        for (Map.Entry<Integer, Set<Integer>> _iter4 : _iter3.getValue().entrySet()) {
          oprot.writeI32(_iter4.getKey());
          
          oprot.writeSetBegin(new TSet(TType.I32, _iter4.getValue().size()));
        for (int _iter5 : _iter4.getValue()) {
          oprot.writeI32(_iter5);
        }
        oprot.writeSetEnd();
        }
        oprot.writeMapEnd();
        }
        oprot.writeMapEnd();
        }
        oprot.writeListEnd();
        }
        oprot.writeListEnd();
          oprot.writeFieldEnd();
        }


      } catch (Throwable _e) {
        throw reactor.core.Exceptions.propagate(_e);
      }
    };
  }

  private static final com.facebook.swift.transport.payload.Reader _turtles_READER =
    oprot -> {
              try {

                return null;

              } catch (Throwable _e) {
                throw reactor.core.Exceptions.propagate(_e);
              }
            };


  @java.lang.Override
  public reactor.core.publisher.Mono<Void> turtles(final List<List<Map<Integer, Map<Integer, Set<Integer>>>>> foo) {
    return _rpcClient
      .flatMap(_rpc -> {
        org.apache.thrift.RequestRpcMetadata _metadata = new org.apache.thrift.RequestRpcMetadata.Builder()
                .setName("turtles")
                .setKind(org.apache.thrift.RpcKind.SINGLE_REQUEST_SINGLE_RESPONSE)
                .setOtherMetadata(Collections.emptyMap())
                .setProtocol(_protocolId)
                .build();

            com.facebook.swift.transport.payload.ClientRequestPayload<Void> _crp =
                com.facebook.swift.transport.payload.ClientRequestPayload.create(
                    _createturtlesWriter(foo),
                    _turtles_READER,
                    _turtles_EXCEPTION_READERS,
                    _metadata,
                    java.util.Collections.emptyMap());

            return _rpc
                .singleRequestSingleResponse(_crp, com.facebook.swift.transport.client.RpcOptions.EMPTY)
                .map(_p -> _p.getData());
      });
  }


}
