/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.params;

import java.util.*;

public class NestedContainersReactiveAsyncWrapper 
  implements NestedContainers.Async {
  private NestedContainers.Reactive _delegate;

  public NestedContainersReactiveAsyncWrapper(NestedContainers.Reactive _delegate) {
    
    this._delegate = _delegate;
  }

  @java.lang.Override
  public void close() {
    _delegate.close();
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> mapList(final Map<Integer, List<Integer>> foo) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.mapList(foo));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> mapSet(final Map<Integer, Set<Integer>> foo) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.mapSet(foo));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> listMap(final List<Map<Integer, Integer>> foo) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.listMap(foo));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> listSet(final List<Set<Integer>> foo) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.listSet(foo));
  }

  @java.lang.Override
  public com.google.common.util.concurrent.ListenableFuture<Void> turtles(final List<List<Map<Integer, Map<Integer, Set<Integer>>>>> foo) {
      return com.facebook.swift.transport.util.FutureUtil.toListenableFuture(_delegate.turtles(foo));
  }

}
